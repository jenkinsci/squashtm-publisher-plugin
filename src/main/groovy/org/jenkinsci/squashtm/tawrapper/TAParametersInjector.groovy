/*
 *     The MIT License
 *
 *     Copyright (C) 2016-2017 Henix, henix.fr
 *
 *     Permission is hereby granted, free of charge, to any person obtaining a copy
 *     of this software and associated documentation files (the "Software"), to deal
 *     in the Software without restriction, including without limitation the rights
 *     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *     copies of the Software, and to permit persons to whom the Software is
 *     furnished to do so, subject to the following conditions:
 *
 *     The above copyright notice and this permission notice shall be included in
 *     all copies or substantial portions of the Software.
 *
 *     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *     THE SOFTWARE.
 */
package org.jenkinsci.squashtm.tawrapper

import static org.jenkinsci.squashtm.tawrapper.TA.*
import hudson.Extension
import hudson.model.AbstractProject
import hudson.model.Action
import hudson.model.FileParameterValue
import hudson.model.ParametersAction
import hudson.model.Queue.QueueDecisionHandler
import hudson.model.Queue.Task

import java.util.logging.Level
import java.util.logging.Logger

import org.apache.commons.fileupload.FileItem
import org.apache.commons.fileupload.disk.DiskFileItem
import org.jenkinsci.squashtm.tawrapper.TAParametersAction.FileBuildParameter
import static org.jenkinsci.squashtm.tawrapper.TA.PRM_TEST_SUITE_JSON

/**
 * <p>
 * 	When a Job is configured to work in TA wrapper mode, will add additional actions to the action list (yes, 
 * according to the javadoc this is legit). 
 * </p>
 * 
 * <h5>Why</h5>
 * <p>
 * 	The parameters detected by the TA wrapper were created earlier (see {@link StaplerBuildOverride}). However 
 *  they couldn't be injected in the build action list then, because the Build object itself didn't exist at this time.
 *  Hence the need for this extension, that kicks in when the build is about to enter the tasks queue.  
 * </p>
 * 
 * <h5>Note on the file parameters</h5>
 * <p>
 * 	As a side mission, this extension also resolve the file parameter (named {@link PRM_TEST_SUITE_JSON}), and which hold a json
 * 	description of the test suite of which Squash TM is expecting the result. Usually the file reside in memory because 
 *  this parameter is not explicitly set in the job configuration - thus is unknown to Jenkins and not processed - in which case 
 *  it's up to this class to write it on the disk. In other cases this parameter is explicitly set, in which case we just reuse 
 *  the file generated by Jenkins.
 * </p>
 * 
 * 
 * @author bsiri
 *
 */
@Extension
class ParameterInjector extends QueueDecisionHandler {
	
	private final static Logger LOGGER = Logger.getLogger(ParameterInjector.class.getName());
	
	public boolean shouldSchedule(Task p, List<Action> actions){
	
		if (buildUsesWrapper(p)){
						
			TAParametersAction taAction = StaplerBuildOverride.PARAMETERS_WORMHOLE.get()

			// additional processing if it uses the parameter 'testsuite.json' 
			if (taAction.isTestRunBuild()){
				
				ParametersAction paramAction = actions.find { it in ParametersAction } 

				try{				
					handleTestsuiteFile taAction, paramAction
				}
				catch(Exception ex){
					LOGGER.log(Level.WARNING, """[TM-PLUGIN] : an error occured while trying to get a 
hold on the file describing the test suite due to : ${ex.message}
The build will be started but the results won't be posted.""")

					// also, disarm parameter 'testsuite.json'
					paramAction.parameters.removeAll { it.name == PRM_TEST_SUITE_JSON }
				}
				
			}
			
			// now append the action to the action list anyway
			actions << taAction
						
		}

			
		// and let the build happen anyway
		true
	}
	
	/*
	 * This action needs to kick in if this is a project that uses the TA wrapper mode 
	 */
	private boolean buildUsesWrapper(Task p){
		(p in AbstractProject) && (p.getProperty(SquashTAWrapperProperty) != null)
	}
	
	
	/*
	 * Ensure that the file that describes the test suite will be available at publishing step.
	 * Two scenarii : 
	 * 	1 - either Jenkins is handling it already because it's part of the job configuration, 
	 *  2 - either it does not and we do it ourselves.
	 */
	private void handleTestsuiteFile(TAParametersAction action, ParametersAction buildParams){
	
		FileBuildParameter taParam = action.getParameter PRM_TEST_SUITE_JSON
		FileItem item = taParam.fileItem
		
		// scenario 1 : Jenkins handles the file for us. Beware that buildParams might be null
		if (buildParams?.getParameter(PRM_TEST_SUITE_JSON) != null){
			
			// in that case, just update our TA parameter with the correct location
			FileParameterValue origParam = buildParams.getParameter(PRM_TEST_SUITE_JSON)
			
			taParam.location = origParam.location
			taParam.absoluteLocation = false
			
			
		}
		// scenario 2 : we must handle the file ourselves. Is it in memory ?
		else if (item.inMemory){
				
			File temp = File.createTempFile "tawrapper", "json"
			temp.deleteOnExit()				
			item.write temp
							
			taParam.location = temp.absolutePath
			taParam.absoluteLocation = true
			
		}
		// scenario 2 bis : we must handle a file that exists already elsewhere. 
		else{
			DiskFileItem diskItem = (DiskFileItem)item
			taParam.location = diskItem.tempFile.absolutePath
			taParam.absoluteLocation = true
		}
		
	}
	
		
}
